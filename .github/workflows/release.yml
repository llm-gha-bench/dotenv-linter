name: Release
on: workflow_dispatch

env:
  CARGO_TERM_COLOR: always

jobs:
  release-binary:
    runs-on: ${{ matrix.OS }}
    strategy:
      matrix:
        build:
          - x86_64-linux-gnu
          - x86_64-linux-musl
          - aarch64-linux-gnu
          - aarch64-linux-musl
          - x86_64-darwin
          - aarch64-darwin
          - x86_64-windows-msvc
          - aarch64-windows-msvc
        include:
          # Linux
          - BUILD: x86_64-linux-gnu
            OS: ubuntu-latest
            TOOLCHAIN: stable
            TARGET: x86_64-unknown-linux-gnu
            ARCH_SUFFIX: linux-x86_64
            BUILD_OPTIONS: ''
          - BUILD: x86_64-linux-musl
            OS: ubuntu-latest
            TOOLCHAIN: stable
            TARGET: x86_64-unknown-linux-musl
            ARCH_SUFFIX: alpine-x86_64
            BUILD_OPTIONS: ''
          - BUILD: aarch64-linux-gnu
            OS: ubuntu-latest
            TOOLCHAIN: stable
            TARGET: aarch64-unknown-linux-gnu
            ARCH_SUFFIX: linux-aarch64
            BUILD_OPTIONS: ''
          - BUILD: aarch64-linux-musl
            OS: ubuntu-latest
            TOOLCHAIN: stable
            TARGET: aarch64-unknown-linux-musl
            ARCH_SUFFIX: alpine-aarch64
            BUILD_OPTIONS: '--no-default-features'
          # macOS
          - BUILD: x86_64-darwin
            OS: macos-11
            TOOLCHAIN: stable
            TARGET: x86_64-apple-darwin
            ARCH_SUFFIX: darwin-x86_64
            BUILD_OPTIONS: ''
          - BUILD: aarch64-darwin
            OS: macos-11
            TOOLCHAIN: stable
            TARGET: aarch64-apple-darwin
            ARCH_SUFFIX: darwin-arm64
            BUILD_OPTIONS: ''
          # Windows
          - BUILD: x86_64-windows-msvc
            OS: windows-latest
            TOOLCHAIN: stable
            TARGET: x86_64-pc-windows-msvc
            ARCH_SUFFIX: win-x64
            BUILD_OPTIONS: ''
          - BUILD: aarch64-windows-msvc
            OS: windows-latest
            TOOLCHAIN: stable
            TARGET: aarch64-pc-windows-msvc
            ARCH_SUFFIX: win-aarch64
            BUILD_OPTIONS: '--no-default-features'
    steps:
      - uses: actions/checkout@v4
      - name: Install musl-tools
        if: matrix.TARGET == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get install -y --no-install-recommends musl-tools
      - name: Install aarch64 gnu linker
        if: matrix.TARGET == 'aarch64-unknown-linux-gnu' || matrix.TARGET == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu musl-tools
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.TOOLCHAIN }}
          targets: ${{ matrix.TARGET }}
      - uses: Swatinem/rust-cache@v2.7.3
        with:
          key: ${{ matrix.TARGET }}
      - name: Build
        run: |
          rustup target add ${{ matrix.TARGET }}
          cargo build --release --target ${{ matrix.TARGET }} ${{ matrix.BUILD_OPTIONS }}
      - name: Archive binary (unix)
        if: matrix.OS != 'windows-latest'
        run: |
          mv target/${{ matrix.TARGET }}/release/dotenv-linter ./dotenv-linter
          chmod +x dotenv-linter
          tar -czf dotenv-linter-${{ matrix.ARCH_SUFFIX }}.tar.gz dotenv-linter
          rm dotenv-linter
      - name: Archive binary (win)
        if: matrix.OS == 'windows-latest'
        run: |
          Compress-Archive -Path ".\target\${{ matrix.TARGET }}\release\dotenv-linter.exe" -DestinationPath ".\dotenv-linter-${{ matrix.ARCH_SUFFIX }}.zip"
      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          files: dotenv-linter-*
          draft: true
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # To build cross-platform images
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push image
        run: |
          GIT_TAG=$(git describe --tags `git rev-list --tags --max-count=1` | sed "s/v//")

          docker buildx build --push --platform linux/amd64,linux/arm64 -f Dockerfile -t dotenvlinter/dotenv-linter:${GIT_TAG} .
          docker buildx build --push --platform linux/amd64,linux/arm64 -f Dockerfile -t dotenvlinter/dotenv-linter:latest .

  release-crate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build and publish to crates.io
        run: |
          cargo login ${{ secrets.CRATES_TOKEN }}
          cargo publish